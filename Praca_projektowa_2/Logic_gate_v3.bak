#lang racket
(require data/heap)
(require rackunit)
(require racket/trace)
#|
(provide sim? wire?
         (contract-out
          [make-sim        (-> sim?)]
          [sim-wait!       (-> sim? positive? void?)]
          [sim-time        (-> sim? real?)]
          [sim-add-action! (-> sim? positive? (-> any/c) void?)]

          [make-wire       (-> sim? wire?)]
          [wire-on-change! (-> wire? (-> any/c) void?)]
          [wire-value      (-> wire? boolean?)]
          [wire-set!       (-> wire? boolean? void?)]

          [bus-value (-> (listof wire?) natural?)]
          [bus-set!  (-> (listof wire?) natural? void?)]

          [gate-not  (-> wire? wire? void?)]
          [gate-and  (-> wire? wire? wire? void?)]
          [gate-nand (-> wire? wire? wire? void?)]
          [gate-or   (-> wire? wire? wire? void?)]
          [gate-nor  (-> wire? wire? wire? void?)]
          [gate-xor  (-> wire? wire? wire? void?)]

          [wire-not  (-> wire? wire?)]
          [wire-and  (-> wire? wire? wire?)]
          [wire-nand (-> wire? wire? wire?)]
          [wire-or   (-> wire? wire? wire?)]
          [wire-nor  (-> wire? wire? wire?)]
          [wire-xor  (-> wire? wire? wire?)]

          [flip-flop (-> wire? wire? wire? void?)]))|#


#|
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
|#

#|STRUKTURY|#

(struct wire
  ([value #:mutable]
   [owner #:mutable]
   [actions #:mutable])
  #:transparent)

(struct action
  ([time]
   [output]
   [input_first]
   [input_second]
   [function])
  #:mutable #:transparent)

(struct wire_action
  ([name]
   [output]
   [input_first]
   [input_second]
   [function])
  #:mutable #:transparent)

(struct sim
  ([actual_time]
   [queue])
  #:mutable #:transparent)

#|
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
|#

#|ACTION|#

;Porownianie struktur
(define (compare first_action second_action)
  (< (action-time first_action) (action-time second_action)))

;Tabelka opoznienia
(define delaytion
  (list
   (cons "and" 1)
   (cons "or" 1)
   (cons "nand" 1)
   (cons "nor" 1)
   (cons "not" 1)
   (cons "own_function" 1)
   (cons "xor" 2)))

;wire_action -> action
(define (wire_action->action give_action)
  (action
   (+ (assoc (wire_action-name give_action) delaytion)
      (sim-time (wire-owner (wire_action-output give_action))))
   (wire_action-output give_action)
   (wire_action-input_first give_action)
   (wire_action-input_second give_action)
   (wire_action-function give_action)))

#|
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
|#

#|SIMULATION|#

;Tworzenie symulacji
(define (make-sim)
  (sim 0 (make-heap compare)))

;Funkcja zwracajaca czas symulacji
(define (sim-time simulation)
  (sim-actual_time simulation))

;Funkcja dodajaca element na heap
;(define (add_event action simulation)
;  (

#|
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
|#

#|WIRE|#

;Tworzenie przewodnika
(define (make-wire simulation)
  (wire #f simulation null))
